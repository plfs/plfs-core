###############################################################################
    PLFS MPI_ADIO
###############################################################################

*** Directories ***

ad_plfs: code to be placed in an MPI's ROMIO. It is MPI/IO's interface to PLFS
patches: generated patches
scripts: helper scripts for use in patching MPI implementations


*** Patching ***

Once the PLFS library has been compiled, it can be used through the MPI/IO
layer. At this time, the MPI implementation has to be patched to make it aware
of PLFS. Instructions for patching and building MPI implementations are given
in README.patching.


*** Using PLFS as a ROMIO ADIO layer for MPI/IO ***

1) Build and install the PLFS library. Make sure your plfsrc file is correct
   by using plfs_check_config (please see top level README.install).
2) To set a file to be used through PLFS, prepend 'plfs:' to a pathname. This
   tells the MPI implementation to use ROMIO and to specifically use PLFS.
   Only files that are operated on through MPI/IO can utilize PLFS, so MPI/IO
   commands must be used.
3) Link the PLFS library to your application at compile time. Example:
   gcc -L/path/to/plfs -lplfs -o hello hello.c
4) Run the application as normal.

See the MPI/IO documentation for more information.

It should be noted that collective buffering and data-sieving are not
supported by PLFS as they are largely untested with PLFS. Support for
collective buffering may be possible in the future, but it is not anticipated
that data-sieving will ever be supported.

Collective buffering and data-sieving are turned on/off by the use of hints
such as romio_cb_write=enable|disable and romio_ds_write=enable|disable,
respectively.


*** Developer Information ***

Developer information, such as tips for generating a new prep.patch, is kept in
README.developer.
