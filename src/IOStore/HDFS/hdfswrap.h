/*
 * hdfswrap.h  thread control wrapper for HDFS
 */

/* DO NOT EDIT -- this file is automatically generated. */

void hdfs_execute(const char *name, void *a, void (*)(void *ap));

/*
 * API function hdfsConnectAsUser
 */
struct hdfsConnectAsUser_args {
    hdfsFS hdfsConnectAsUser_ret;
    const char *host;
    tPort port;
    const char *user;
};

void hdfsConnectAsUser_handler(void *arg) {
    struct hdfsConnectAsUser_args *agp = (struct hdfsConnectAsUser_args *)arg;
    agp->hdfsConnectAsUser_ret = hdfsConnectAsUser(agp->host, agp->port, agp->user);
    return;
}

hdfsFS hdfsConnectAsUser_wrap(const char *host, tPort port, const char *user) {
    struct hdfsConnectAsUser_args ag;
    ag.host = host;
    ag.port = port;
    ag.user = user;
    /* send to thread pool for execution */
    hdfs_execute("hdfsConnectAsUser", (void *)&ag, hdfsConnectAsUser_handler);
    return(ag.hdfsConnectAsUser_ret);
}

/*
 * API function hdfsConnect
 */
struct hdfsConnect_args {
    hdfsFS hdfsConnect_ret;
    const char *host;
    tPort port;
};

void hdfsConnect_handler(void *arg) {
    struct hdfsConnect_args *agp = (struct hdfsConnect_args *)arg;
    agp->hdfsConnect_ret = hdfsConnect(agp->host, agp->port);
    return;
}

hdfsFS hdfsConnect_wrap(const char *host, tPort port) {
    struct hdfsConnect_args ag;
    ag.host = host;
    ag.port = port;
    /* send to thread pool for execution */
    hdfs_execute("hdfsConnect", (void *)&ag, hdfsConnect_handler);
    return(ag.hdfsConnect_ret);
}

/*
 * API function hdfsDisconnect
 */
struct hdfsDisconnect_args {
    int hdfsDisconnect_ret;
    hdfsFS fs;
};

void hdfsDisconnect_handler(void *arg) {
    struct hdfsDisconnect_args *agp = (struct hdfsDisconnect_args *)arg;
    agp->hdfsDisconnect_ret = hdfsDisconnect(agp->fs);
    return;
}

int hdfsDisconnect_wrap(hdfsFS fs) {
    struct hdfsDisconnect_args ag;
    ag.fs = fs;
    /* send to thread pool for execution */
    hdfs_execute("hdfsDisconnect", (void *)&ag, hdfsDisconnect_handler);
    return(ag.hdfsDisconnect_ret);
}

/*
 * API function hdfsOpenFile
 */
struct hdfsOpenFile_args {
    hdfsFile hdfsOpenFile_ret;
    hdfsFS fs;
    const char *path;
    int flags;
    int bufferSize;
    short replication;
    tSize blocksize;
};

void hdfsOpenFile_handler(void *arg) {
    struct hdfsOpenFile_args *agp = (struct hdfsOpenFile_args *)arg;
    agp->hdfsOpenFile_ret = hdfsOpenFile(agp->fs, agp->path, agp->flags, agp->bufferSize, agp->replication, agp->blocksize);
    return;
}

hdfsFile hdfsOpenFile_wrap(hdfsFS fs, const char *path, int flags, int bufferSize, short replication, tSize blocksize) {
    struct hdfsOpenFile_args ag;
    ag.fs = fs;
    ag.path = path;
    ag.flags = flags;
    ag.bufferSize = bufferSize;
    ag.replication = replication;
    ag.blocksize = blocksize;
    /* send to thread pool for execution */
    hdfs_execute("hdfsOpenFile", (void *)&ag, hdfsOpenFile_handler);
    return(ag.hdfsOpenFile_ret);
}

/*
 * API function hdfsCloseFile
 */
struct hdfsCloseFile_args {
    int hdfsCloseFile_ret;
    hdfsFS fs;
    hdfsFile file;
};

void hdfsCloseFile_handler(void *arg) {
    struct hdfsCloseFile_args *agp = (struct hdfsCloseFile_args *)arg;
    agp->hdfsCloseFile_ret = hdfsCloseFile(agp->fs, agp->file);
    return;
}

int hdfsCloseFile_wrap(hdfsFS fs, hdfsFile file) {
    struct hdfsCloseFile_args ag;
    ag.fs = fs;
    ag.file = file;
    /* send to thread pool for execution */
    hdfs_execute("hdfsCloseFile", (void *)&ag, hdfsCloseFile_handler);
    return(ag.hdfsCloseFile_ret);
}

/*
 * API function hdfsExists
 */
struct hdfsExists_args {
    int hdfsExists_ret;
    hdfsFS fs;
    const char *path;
};

void hdfsExists_handler(void *arg) {
    struct hdfsExists_args *agp = (struct hdfsExists_args *)arg;
    agp->hdfsExists_ret = hdfsExists(agp->fs, agp->path);
    return;
}

int hdfsExists_wrap(hdfsFS fs, const char *path) {
    struct hdfsExists_args ag;
    ag.fs = fs;
    ag.path = path;
    /* send to thread pool for execution */
    hdfs_execute("hdfsExists", (void *)&ag, hdfsExists_handler);
    return(ag.hdfsExists_ret);
}

/*
 * API function hdfsSeek
 */
struct hdfsSeek_args {
    int hdfsSeek_ret;
    hdfsFS fs;
    hdfsFile file;
    tOffset desiredPos;
};

void hdfsSeek_handler(void *arg) {
    struct hdfsSeek_args *agp = (struct hdfsSeek_args *)arg;
    agp->hdfsSeek_ret = hdfsSeek(agp->fs, agp->file, agp->desiredPos);
    return;
}

int hdfsSeek_wrap(hdfsFS fs, hdfsFile file, tOffset desiredPos) {
    struct hdfsSeek_args ag;
    ag.fs = fs;
    ag.file = file;
    ag.desiredPos = desiredPos;
    /* send to thread pool for execution */
    hdfs_execute("hdfsSeek", (void *)&ag, hdfsSeek_handler);
    return(ag.hdfsSeek_ret);
}

/*
 * API function hdfsTell
 */
struct hdfsTell_args {
    tOffset hdfsTell_ret;
    hdfsFS fs;
    hdfsFile file;
};

void hdfsTell_handler(void *arg) {
    struct hdfsTell_args *agp = (struct hdfsTell_args *)arg;
    agp->hdfsTell_ret = hdfsTell(agp->fs, agp->file);
    return;
}

tOffset hdfsTell_wrap(hdfsFS fs, hdfsFile file) {
    struct hdfsTell_args ag;
    ag.fs = fs;
    ag.file = file;
    /* send to thread pool for execution */
    hdfs_execute("hdfsTell", (void *)&ag, hdfsTell_handler);
    return(ag.hdfsTell_ret);
}

/*
 * API function hdfsRead
 */
struct hdfsRead_args {
    tSize hdfsRead_ret;
    hdfsFS fs;
    hdfsFile file;
    void *buffer;
    tSize length;
};

void hdfsRead_handler(void *arg) {
    struct hdfsRead_args *agp = (struct hdfsRead_args *)arg;
    agp->hdfsRead_ret = hdfsRead(agp->fs, agp->file, agp->buffer, agp->length);
    return;
}

tSize hdfsRead_wrap(hdfsFS fs, hdfsFile file, void *buffer, tSize length) {
    struct hdfsRead_args ag;
    ag.fs = fs;
    ag.file = file;
    ag.buffer = buffer;
    ag.length = length;
    /* send to thread pool for execution */
    hdfs_execute("hdfsRead", (void *)&ag, hdfsRead_handler);
    return(ag.hdfsRead_ret);
}

/*
 * API function hdfsPread
 */
struct hdfsPread_args {
    tSize hdfsPread_ret;
    hdfsFS fs;
    hdfsFile file;
    tOffset position;
    void *buffer;
    tSize length;
};

void hdfsPread_handler(void *arg) {
    struct hdfsPread_args *agp = (struct hdfsPread_args *)arg;
    agp->hdfsPread_ret = hdfsPread(agp->fs, agp->file, agp->position, agp->buffer, agp->length);
    return;
}

tSize hdfsPread_wrap(hdfsFS fs, hdfsFile file, tOffset position, void *buffer, tSize length) {
    struct hdfsPread_args ag;
    ag.fs = fs;
    ag.file = file;
    ag.position = position;
    ag.buffer = buffer;
    ag.length = length;
    /* send to thread pool for execution */
    hdfs_execute("hdfsPread", (void *)&ag, hdfsPread_handler);
    return(ag.hdfsPread_ret);
}

/*
 * API function hdfsWrite
 */
struct hdfsWrite_args {
    tSize hdfsWrite_ret;
    hdfsFS fs;
    hdfsFile file;
    const void *buffer;
    tSize length;
};

void hdfsWrite_handler(void *arg) {
    struct hdfsWrite_args *agp = (struct hdfsWrite_args *)arg;
    agp->hdfsWrite_ret = hdfsWrite(agp->fs, agp->file, agp->buffer, agp->length);
    return;
}

tSize hdfsWrite_wrap(hdfsFS fs, hdfsFile file, const void *buffer, tSize length) {
    struct hdfsWrite_args ag;
    ag.fs = fs;
    ag.file = file;
    ag.buffer = buffer;
    ag.length = length;
    /* send to thread pool for execution */
    hdfs_execute("hdfsWrite", (void *)&ag, hdfsWrite_handler);
    return(ag.hdfsWrite_ret);
}

/*
 * API function hdfsFlush
 */
struct hdfsFlush_args {
    int hdfsFlush_ret;
    hdfsFS fs;
    hdfsFile file;
};

void hdfsFlush_handler(void *arg) {
    struct hdfsFlush_args *agp = (struct hdfsFlush_args *)arg;
    agp->hdfsFlush_ret = hdfsFlush(agp->fs, agp->file);
    return;
}

int hdfsFlush_wrap(hdfsFS fs, hdfsFile file) {
    struct hdfsFlush_args ag;
    ag.fs = fs;
    ag.file = file;
    /* send to thread pool for execution */
    hdfs_execute("hdfsFlush", (void *)&ag, hdfsFlush_handler);
    return(ag.hdfsFlush_ret);
}

/*
 * API function hdfsAvailable
 */
struct hdfsAvailable_args {
    int hdfsAvailable_ret;
    hdfsFS fs;
    hdfsFile file;
};

void hdfsAvailable_handler(void *arg) {
    struct hdfsAvailable_args *agp = (struct hdfsAvailable_args *)arg;
    agp->hdfsAvailable_ret = hdfsAvailable(agp->fs, agp->file);
    return;
}

int hdfsAvailable_wrap(hdfsFS fs, hdfsFile file) {
    struct hdfsAvailable_args ag;
    ag.fs = fs;
    ag.file = file;
    /* send to thread pool for execution */
    hdfs_execute("hdfsAvailable", (void *)&ag, hdfsAvailable_handler);
    return(ag.hdfsAvailable_ret);
}

/*
 * API function hdfsCopy
 */
struct hdfsCopy_args {
    int hdfsCopy_ret;
    hdfsFS srcFS;
    const char *src;
    hdfsFS dstFS;
    const char *dst;
};

void hdfsCopy_handler(void *arg) {
    struct hdfsCopy_args *agp = (struct hdfsCopy_args *)arg;
    agp->hdfsCopy_ret = hdfsCopy(agp->srcFS, agp->src, agp->dstFS, agp->dst);
    return;
}

int hdfsCopy_wrap(hdfsFS srcFS, const char *src, hdfsFS dstFS, const char *dst) {
    struct hdfsCopy_args ag;
    ag.srcFS = srcFS;
    ag.src = src;
    ag.dstFS = dstFS;
    ag.dst = dst;
    /* send to thread pool for execution */
    hdfs_execute("hdfsCopy", (void *)&ag, hdfsCopy_handler);
    return(ag.hdfsCopy_ret);
}

/*
 * API function hdfsMove
 */
struct hdfsMove_args {
    int hdfsMove_ret;
    hdfsFS srcFS;
    const char *src;
    hdfsFS dstFS;
    const char *dst;
};

void hdfsMove_handler(void *arg) {
    struct hdfsMove_args *agp = (struct hdfsMove_args *)arg;
    agp->hdfsMove_ret = hdfsMove(agp->srcFS, agp->src, agp->dstFS, agp->dst);
    return;
}

int hdfsMove_wrap(hdfsFS srcFS, const char *src, hdfsFS dstFS, const char *dst) {
    struct hdfsMove_args ag;
    ag.srcFS = srcFS;
    ag.src = src;
    ag.dstFS = dstFS;
    ag.dst = dst;
    /* send to thread pool for execution */
    hdfs_execute("hdfsMove", (void *)&ag, hdfsMove_handler);
    return(ag.hdfsMove_ret);
}

/*
 * API function hdfsDelete
 */
struct hdfsDelete_args {
    int hdfsDelete_ret;
    hdfsFS fs;
    const char *path;
    int recursive;
};

void hdfsDelete_handler(void *arg) {
    struct hdfsDelete_args *agp = (struct hdfsDelete_args *)arg;
    agp->hdfsDelete_ret = hdfsDelete(agp->fs, agp->path, agp->recursive);
    return;
}

int hdfsDelete_wrap(hdfsFS fs, const char *path, int recursive) {
    struct hdfsDelete_args ag;
    ag.fs = fs;
    ag.path = path;
    ag.recursive = recursive;
    /* send to thread pool for execution */
    hdfs_execute("hdfsDelete", (void *)&ag, hdfsDelete_handler);
    return(ag.hdfsDelete_ret);
}

/*
 * API function hdfsRename
 */
struct hdfsRename_args {
    int hdfsRename_ret;
    hdfsFS fs;
    const char *oldPath;
    const char *newPath;
};

void hdfsRename_handler(void *arg) {
    struct hdfsRename_args *agp = (struct hdfsRename_args *)arg;
    agp->hdfsRename_ret = hdfsRename(agp->fs, agp->oldPath, agp->newPath);
    return;
}

int hdfsRename_wrap(hdfsFS fs, const char *oldPath, const char *newPath) {
    struct hdfsRename_args ag;
    ag.fs = fs;
    ag.oldPath = oldPath;
    ag.newPath = newPath;
    /* send to thread pool for execution */
    hdfs_execute("hdfsRename", (void *)&ag, hdfsRename_handler);
    return(ag.hdfsRename_ret);
}

/*
 * API function hdfsGetWorkingDirectory
 */
struct hdfsGetWorkingDirectory_args {
    char *hdfsGetWorkingDirectory_ret;
    hdfsFS fs;
    char *buffer;
    size_t bufferSize;
};

void hdfsGetWorkingDirectory_handler(void *arg) {
    struct hdfsGetWorkingDirectory_args *agp = (struct hdfsGetWorkingDirectory_args *)arg;
    agp->hdfsGetWorkingDirectory_ret = hdfsGetWorkingDirectory(agp->fs, agp->buffer, agp->bufferSize);
    return;
}

char *hdfsGetWorkingDirectory_wrap(hdfsFS fs, char *buffer, size_t bufferSize) {
    struct hdfsGetWorkingDirectory_args ag;
    ag.fs = fs;
    ag.buffer = buffer;
    ag.bufferSize = bufferSize;
    /* send to thread pool for execution */
    hdfs_execute("hdfsGetWorkingDirectory", (void *)&ag, hdfsGetWorkingDirectory_handler);
    return(ag.hdfsGetWorkingDirectory_ret);
}

/*
 * API function hdfsSetWorkingDirectory
 */
struct hdfsSetWorkingDirectory_args {
    int hdfsSetWorkingDirectory_ret;
    hdfsFS fs;
    const char *path;
};

void hdfsSetWorkingDirectory_handler(void *arg) {
    struct hdfsSetWorkingDirectory_args *agp = (struct hdfsSetWorkingDirectory_args *)arg;
    agp->hdfsSetWorkingDirectory_ret = hdfsSetWorkingDirectory(agp->fs, agp->path);
    return;
}

int hdfsSetWorkingDirectory_wrap(hdfsFS fs, const char *path) {
    struct hdfsSetWorkingDirectory_args ag;
    ag.fs = fs;
    ag.path = path;
    /* send to thread pool for execution */
    hdfs_execute("hdfsSetWorkingDirectory", (void *)&ag, hdfsSetWorkingDirectory_handler);
    return(ag.hdfsSetWorkingDirectory_ret);
}

/*
 * API function hdfsCreateDirectory
 */
struct hdfsCreateDirectory_args {
    int hdfsCreateDirectory_ret;
    hdfsFS fs;
    const char *path;
};

void hdfsCreateDirectory_handler(void *arg) {
    struct hdfsCreateDirectory_args *agp = (struct hdfsCreateDirectory_args *)arg;
    agp->hdfsCreateDirectory_ret = hdfsCreateDirectory(agp->fs, agp->path);
    return;
}

int hdfsCreateDirectory_wrap(hdfsFS fs, const char *path) {
    struct hdfsCreateDirectory_args ag;
    ag.fs = fs;
    ag.path = path;
    /* send to thread pool for execution */
    hdfs_execute("hdfsCreateDirectory", (void *)&ag, hdfsCreateDirectory_handler);
    return(ag.hdfsCreateDirectory_ret);
}

/*
 * API function hdfsSetReplication
 */
struct hdfsSetReplication_args {
    int hdfsSetReplication_ret;
    hdfsFS fs;
    const char *path;
    int16_t replication;
};

void hdfsSetReplication_handler(void *arg) {
    struct hdfsSetReplication_args *agp = (struct hdfsSetReplication_args *)arg;
    agp->hdfsSetReplication_ret = hdfsSetReplication(agp->fs, agp->path, agp->replication);
    return;
}

int hdfsSetReplication_wrap(hdfsFS fs, const char *path, int16_t replication) {
    struct hdfsSetReplication_args ag;
    ag.fs = fs;
    ag.path = path;
    ag.replication = replication;
    /* send to thread pool for execution */
    hdfs_execute("hdfsSetReplication", (void *)&ag, hdfsSetReplication_handler);
    return(ag.hdfsSetReplication_ret);
}

/*
 * API function hdfsListDirectory
 */
struct hdfsListDirectory_args {
    hdfsFileInfo *hdfsListDirectory_ret;
    hdfsFS fs;
    const char *path;
    int *numEntries;
};

void hdfsListDirectory_handler(void *arg) {
    struct hdfsListDirectory_args *agp = (struct hdfsListDirectory_args *)arg;
    agp->hdfsListDirectory_ret = hdfsListDirectory(agp->fs, agp->path, agp->numEntries);
    return;
}

hdfsFileInfo *hdfsListDirectory_wrap(hdfsFS fs, const char *path, int *numEntries) {
    struct hdfsListDirectory_args ag;
    ag.fs = fs;
    ag.path = path;
    ag.numEntries = numEntries;
    /* send to thread pool for execution */
    hdfs_execute("hdfsListDirectory", (void *)&ag, hdfsListDirectory_handler);
    return(ag.hdfsListDirectory_ret);
}

/*
 * API function hdfsGetPathInfo
 */
struct hdfsGetPathInfo_args {
    hdfsFileInfo *hdfsGetPathInfo_ret;
    hdfsFS fs;
    const char *path;
};

void hdfsGetPathInfo_handler(void *arg) {
    struct hdfsGetPathInfo_args *agp = (struct hdfsGetPathInfo_args *)arg;
    agp->hdfsGetPathInfo_ret = hdfsGetPathInfo(agp->fs, agp->path);
    return;
}

hdfsFileInfo *hdfsGetPathInfo_wrap(hdfsFS fs, const char *path) {
    struct hdfsGetPathInfo_args ag;
    ag.fs = fs;
    ag.path = path;
    /* send to thread pool for execution */
    hdfs_execute("hdfsGetPathInfo", (void *)&ag, hdfsGetPathInfo_handler);
    return(ag.hdfsGetPathInfo_ret);
}

/*
 * API function hdfsFreeFileInfo
 */
struct hdfsFreeFileInfo_args {
    /* void fn.  no return value */
    hdfsFileInfo *xhdfsFileInfo;
    int numEntries;
};

void hdfsFreeFileInfo_handler(void *arg) {
    struct hdfsFreeFileInfo_args *agp = (struct hdfsFreeFileInfo_args *)arg;
hdfsFreeFileInfo(agp->xhdfsFileInfo, agp->numEntries);
    return;
}

void hdfsFreeFileInfo_wrap(hdfsFileInfo *xhdfsFileInfo, int numEntries) {
    struct hdfsFreeFileInfo_args ag;
    ag.xhdfsFileInfo = xhdfsFileInfo;
    ag.numEntries = numEntries;
    /* send to thread pool for execution */
    hdfs_execute("hdfsFreeFileInfo", (void *)&ag, hdfsFreeFileInfo_handler);
    return;    /* void, no ret val */
}

/*
 * API function hdfsGetHosts
 */
struct hdfsGetHosts_args {
    char ***hdfsGetHosts_ret;
    hdfsFS fs;
    const char *path;
    tOffset start;
    tOffset length;
};

void hdfsGetHosts_handler(void *arg) {
    struct hdfsGetHosts_args *agp = (struct hdfsGetHosts_args *)arg;
    agp->hdfsGetHosts_ret = hdfsGetHosts(agp->fs, agp->path, agp->start, agp->length);
    return;
}

char ***hdfsGetHosts_wrap(hdfsFS fs, const char *path, tOffset start, tOffset length) {
    struct hdfsGetHosts_args ag;
    ag.fs = fs;
    ag.path = path;
    ag.start = start;
    ag.length = length;
    /* send to thread pool for execution */
    hdfs_execute("hdfsGetHosts", (void *)&ag, hdfsGetHosts_handler);
    return(ag.hdfsGetHosts_ret);
}

/*
 * API function hdfsFreeHosts
 */
struct hdfsFreeHosts_args {
    /* void fn.  no return value */
    char ***blockHosts;
};

void hdfsFreeHosts_handler(void *arg) {
    struct hdfsFreeHosts_args *agp = (struct hdfsFreeHosts_args *)arg;
hdfsFreeHosts(agp->blockHosts);
    return;
}

void hdfsFreeHosts_wrap(char ***blockHosts) {
    struct hdfsFreeHosts_args ag;
    ag.blockHosts = blockHosts;
    /* send to thread pool for execution */
    hdfs_execute("hdfsFreeHosts", (void *)&ag, hdfsFreeHosts_handler);
    return;    /* void, no ret val */
}

/*
 * API function hdfsGetDefaultBlockSize
 */
struct hdfsGetDefaultBlockSize_args {
    tOffset hdfsGetDefaultBlockSize_ret;
    hdfsFS fs;
};

void hdfsGetDefaultBlockSize_handler(void *arg) {
    struct hdfsGetDefaultBlockSize_args *agp = (struct hdfsGetDefaultBlockSize_args *)arg;
    agp->hdfsGetDefaultBlockSize_ret = hdfsGetDefaultBlockSize(agp->fs);
    return;
}

tOffset hdfsGetDefaultBlockSize_wrap(hdfsFS fs) {
    struct hdfsGetDefaultBlockSize_args ag;
    ag.fs = fs;
    /* send to thread pool for execution */
    hdfs_execute("hdfsGetDefaultBlockSize", (void *)&ag, hdfsGetDefaultBlockSize_handler);
    return(ag.hdfsGetDefaultBlockSize_ret);
}

/*
 * API function hdfsGetCapacity
 */
struct hdfsGetCapacity_args {
    tOffset hdfsGetCapacity_ret;
    hdfsFS fs;
};

void hdfsGetCapacity_handler(void *arg) {
    struct hdfsGetCapacity_args *agp = (struct hdfsGetCapacity_args *)arg;
    agp->hdfsGetCapacity_ret = hdfsGetCapacity(agp->fs);
    return;
}

tOffset hdfsGetCapacity_wrap(hdfsFS fs) {
    struct hdfsGetCapacity_args ag;
    ag.fs = fs;
    /* send to thread pool for execution */
    hdfs_execute("hdfsGetCapacity", (void *)&ag, hdfsGetCapacity_handler);
    return(ag.hdfsGetCapacity_ret);
}

/*
 * API function hdfsGetUsed
 */
struct hdfsGetUsed_args {
    tOffset hdfsGetUsed_ret;
    hdfsFS fs;
};

void hdfsGetUsed_handler(void *arg) {
    struct hdfsGetUsed_args *agp = (struct hdfsGetUsed_args *)arg;
    agp->hdfsGetUsed_ret = hdfsGetUsed(agp->fs);
    return;
}

tOffset hdfsGetUsed_wrap(hdfsFS fs) {
    struct hdfsGetUsed_args ag;
    ag.fs = fs;
    /* send to thread pool for execution */
    hdfs_execute("hdfsGetUsed", (void *)&ag, hdfsGetUsed_handler);
    return(ag.hdfsGetUsed_ret);
}

/*
 * API function hdfsChown
 */
struct hdfsChown_args {
    int hdfsChown_ret;
    hdfsFS fs;
    const char *path;
    const char *owner;
    const char *group;
};

void hdfsChown_handler(void *arg) {
    struct hdfsChown_args *agp = (struct hdfsChown_args *)arg;
    agp->hdfsChown_ret = hdfsChown(agp->fs, agp->path, agp->owner, agp->group);
    return;
}

int hdfsChown_wrap(hdfsFS fs, const char *path, const char *owner, const char *group) {
    struct hdfsChown_args ag;
    ag.fs = fs;
    ag.path = path;
    ag.owner = owner;
    ag.group = group;
    /* send to thread pool for execution */
    hdfs_execute("hdfsChown", (void *)&ag, hdfsChown_handler);
    return(ag.hdfsChown_ret);
}

/*
 * API function hdfsChmod
 */
struct hdfsChmod_args {
    int hdfsChmod_ret;
    hdfsFS fs;
    const char *path;
    short mode;
};

void hdfsChmod_handler(void *arg) {
    struct hdfsChmod_args *agp = (struct hdfsChmod_args *)arg;
    agp->hdfsChmod_ret = hdfsChmod(agp->fs, agp->path, agp->mode);
    return;
}

int hdfsChmod_wrap(hdfsFS fs, const char *path, short mode) {
    struct hdfsChmod_args ag;
    ag.fs = fs;
    ag.path = path;
    ag.mode = mode;
    /* send to thread pool for execution */
    hdfs_execute("hdfsChmod", (void *)&ag, hdfsChmod_handler);
    return(ag.hdfsChmod_ret);
}

/*
 * API function hdfsUtime
 */
struct hdfsUtime_args {
    int hdfsUtime_ret;
    hdfsFS fs;
    const char *path;
    tTime mtime;
    tTime atime;
};

void hdfsUtime_handler(void *arg) {
    struct hdfsUtime_args *agp = (struct hdfsUtime_args *)arg;
    agp->hdfsUtime_ret = hdfsUtime(agp->fs, agp->path, agp->mtime, agp->atime);
    return;
}

int hdfsUtime_wrap(hdfsFS fs, const char *path, tTime mtime, tTime atime) {
    struct hdfsUtime_args ag;
    ag.fs = fs;
    ag.path = path;
    ag.mtime = mtime;
    ag.atime = atime;
    /* send to thread pool for execution */
    hdfs_execute("hdfsUtime", (void *)&ag, hdfsUtime_handler);
    return(ag.hdfsUtime_ret);
}

