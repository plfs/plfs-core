0) CODING STYLE
Please read README.coding

0.5) SVN
Please read README.svn for a few tricks about working with svn

1) MAILING LIST
Please join at https://lists.sourceforge.net/lists/listinfo/plfs-devel

2) TRACKING CODE CHANGES
All developers should pay attention to what others are doing to the code.
More on this below.  But all developers should either subscribe to the RSS
feed at:
http://sourceforge.net/export/rss2_keepsake.php?group_id=261435
or set something up at sourceforge to email you when code is committed.

3) COMMITTING SMALL CODE CHANGES TO TRUNK
For small changes such as changes to the tools that don't change anything in
the library or cosmetic stuff or changes to documentation, just go ahead and
commit to the trunk.  The other developers will see this and can comment if
they want.

4) COMMITTING LARGE CODE CHANGES TO TRUNK
All other coding efforts that aren't small code changes must be vetted on the
mailing list before being committed.  Code in a branch and send the branch
address to the mailing list.  In the email, describe the motivation for the
change, and describe the decisions you made about how to implement your 
changes.  Allow three business days before merging into the trunk.  

4) AUTOGEN
./autogen.sh checks for versions of the autotools to create the PLFS build
scripts. The check is a greater than or equal to check. That is, any version
of the autotools that is greater than or equal to a minimum will work. 
Makefile.tools can be used to quickly download and build the needed versions.
Do 'make -f Makefile.tools' to install all the necessary build tools into
./buildtools/bin. Then prepend that to your PATH and then ./autogen.sh will
just work. Except sometimes recently Makefile.tools doesn't work always. Very
annoying. In this case, just find one machine where you have all the right
versions and then use sshfs from that machine to the target machine to do the
autogen.

5) CONFIGURE
./easyconf.sh is your friend.  Here are the environment variables I set:

setenv PLFS_WANT_ALL_DEBUG 1
setenv PLFS_WANT_DEBUG_FLAGS 1
setenv PLFS_WANT_VERBOSE_CONF_OUT 1 
setenv PLFS_WANT_ADIO 0
# treat all build warnings as errors.  No build warnings!
setenv CFLAGS '-Wall -Werror -Wshadow'
setenv CXXFLAGS '-Wall -Werror -Wshadow'

Notice especially the bottom two.  We want warning free code so print out
all warnings and treat them as errors.

6) MAKEFILES
Don't edit Makefiles directly.  Edit the Makefile.am files and then redo autogen and configure

7) DEBUGGING WITH MLOG
Please read README.mlog

8) valgrind on OS X
You will need to run dsymutil on the plfs binary and libplfs.0.dylib to get 
debug symbols available for valgrind so it can report line numbers.

9) Release Process
   1) Make sure that the local svn instance has an updated ChangeLog
   2) Make sure that the local svn instance has an updated plfs.spec file.
      That is, make sure the files listed in the spec file match what will
      be created via 'make install'.
   3) The local svn instance needs to be already checked in, be it trunk or a
      release branch.
   4) Copy the local svn instance to the versions directory. Here's an example
      using trunk:
      svn co https://plfs.svn.sourceforge.net/svnroot/plfs plfs 
      cd plfs
      svn copy trunk versions/<release>
   5) Update info specific to the release
      cd versions/<release>
      Update the VERSION file to contain <release>
      Update the plfs.spec file to contain <release> on the "Version:" line
      svn commit
   6) Generate a tarball
      ./autogen.sh
      ./configure
      make dist # Creates plfs-<version>.tar.gz
   7) Upload the tarball to sourceforge.net
