1) CODING STYLE
Please read README.coding

2) Git
Since PLFS is hosted on github.com, git is the version control system in use.
Please see README.git for further information on working with git.

3) Receive notifications for PLFS on github.com
Navigate to the plfs-core page on github.com, 
https://github.com/plfs/plfs-core. Make sure to be logged in and click on the
"Watch" button. A user who is "watching" a repository will receive
notifications of what happens on the repository. Users can edit notification
settings for their github account in Account Settings.

4) Treat all build warnings as errors.
No build warnings!
Use the following environment variables when running configure to make sure
all warnings are being treated as errors:

setenv CFLAGS '-Wall -Werror -Wshadow'
setenv CXXFLAGS '-Wall -Werror -Wshadow'

5) Everything must be code-reviewed before being committed to the master
branch on github
The official master branch of PLFS will be referred to as plfs/plfs-core. In
order to help maintain code review of every commit to plfs/plfs-core the PLFS
project will use a Fork & Pull model that github provides.

In order to use the Fork & Pull model, users need to Fork plfs/plfs-core to
their own account on github. See README.git, SECTION 1. SETUP A LOCAL REPO for
more information. The user's clone of plfs/plfs-core that resides on
github.com will be referred to as user/plfs-core.

Each user will now clone their own user/plfs-core when they want to work on
PLFS. See README.git for more information.

Once a user is finished with the changes they would like to make and all
changes are committed, they push those changes to user/plfs-core. Once the
changes are in user/plfs-core, the user will initiate a "Pull Request" on
github. The "Pull Request" allows others to verify the changes and commit them
to the master branch of plfs/plfs-core.

The information about initiating a "Pull Request" can be found in README.git.
Depending on where the changes are coming from and where they are headed, see
SECTION 2 (master to master), SECTION 3 (non-master branch to non-master
branch), or SECTION 4 (non-master branch to master branch).

A "Pull Request" is finalized by a developer who has push access to
plfs/plfs-core. They navigate to the plfs/plfs-core page and click on the 
"Pull Requests" tab. Each Pull Request will be listed here. The developer will
click on the applicable Pull Request. On the Pull Request page, it is possible
to see all commits associated with the Pull Request, including code changes.
It is also possible to enter comments on the Pull Request page about the
changes. If the changes are to be committed to plfs/plfs-core, the developer
will click on the "Merge" button.

A developer different than the one doing the Pull Request must do the code
review. A developer is not allowed to Merge their own Pull Request.

6) Development cycle
The "master" branch will be the place to put code that we intend to go out in
the next release. There is no real requirement that the master branch be
deployable at any time; instead, it will be the main development branch.

A non-master branch will be created to work on functionality that we know will
not be in or are not sure will be ready for the next release. Bug fixes can go
directly to the master branch.

Developers using non-master branches should frequently merge the master branch
of plfs/plfs-core in to their non-master branches to ensure whatever they are
working on stays compatible with the current product.

7) Release Process
For the purposes of tagging a release, changes may be committed directly to
plfs/plfs-core. Only changes to VERSION and ChangeLog are allowed to go
directly to plfs/plfs-core; all others have to go through the normal code
review process.

Regression testing a release
    1) Once all new features are in and a new release is to be made, the
    master branch of plfs/plfs-core is now frozen. No new features may be
    committed; only bug-fixes can be committed. Code review will be used to
    enforce this.
    2) Verify that 'make dist' creates an acceptable tarball. Verify the
    following:
        1) The appropriate patches have been generated in /mpi_adio/patches.
        Each directory should get a <MPI>-plfs.patch where <MPI> is ompi, 
        mpich2, etc.
        2) The following are in contrib/init.d: plfs.init, plfs.init.suse,
        plfs.sysconfig.
        3) PLFS can be built and used from the resulting tarball.
    3) Update plfs.spec and verify an rpm can be built with it. This will
    verify that all files listed in the spec file match what will be created
    via 'make install'. Set "Version:" to <release> rather than <release>.rc1.
    Make sure these changes are checked in to plfs/plfs-core via the
    appropriate method.
    4) If the procedure outlined in README.git has been followed, the
    committer will have a working repository with a remote defined as upstream
    that points to plfs/plfs-core. Upstream will be used directly in the
    following instructions, so ensure that upstream is sufficiently set up.
    5) Update ChangeLog
    6) Update VERSION to contain <release>.rc1 where <release> is a version
    number such as 2.3, for example.
    7) Commit changes to the local repository.
    8) Make an annotated git tag: git tag -a <release>.rc1
    9) Push local commits to upstream: git push upstream master
    10) Push <release>.rc1 tag to upstream: git push upstream <release>.rc1
    11) Regression test <release>.rc1. If problems are found and fixed, iterate
    through steps 5 through 10 to create rc2. Iterate as many times as needed
    until the release passes all regression tests satisfactorily. Once all
    testing requirements have been satisfied, move on to the "Tag the release"
    section.

Tag the release
Once regression testing is done and a new release is ready, do the following:
    1) Update VERSION to contain <release> (remove rc strings).
    2) Commit that change to the local repository
    3) Make an annotated git tag: git tag -a <release>
    4) Push local commits to upstream: git push upstream master
    5) Push <release> tag to upstream: git push upstream <release>
    6) The master branch on plfs/plfs-core is now unfrozen.

Generate a tarball
    1) Make sure the local repository is set for <release> (use
    'git checkout <release>')
    2) ./autogen.sh
    3) ./configure
    4) make dist # Creates plfs-<version>.tar.gz
    5) Upload the tarball to github.com

8) AUTOGEN
./autogen.sh checks for versions of the autotools to create the PLFS build
scripts. The check is a greater than or equal to check. That is, any version
of the autotools that is greater than or equal to a minimum will work. 
Makefile.tools can be used to quickly download and build the needed versions.
Do 'make -f Makefile.tools' to install all the necessary build tools into
./buildtools/bin. Then prepend that to your PATH and then ./autogen.sh will
just work. Except sometimes recently Makefile.tools doesn't work always. Very
annoying. In this case, just find one machine where you have all the right
versions and then use sshfs from that machine to the target machine to do the
autogen.

9) MAKEFILES
Don't edit Makefiles directly.  Edit the Makefile.am files and then redo
autogen and configure

10) CONFIGURE
./easyconf.sh is your friend.  Here are the environment variables I set:

setenv PLFS_WANT_ALL_DEBUG 1
setenv PLFS_WANT_DEBUG_FLAGS 1
setenv PLFS_WANT_VERBOSE_CONF_OUT 1 
setenv PLFS_WANT_ADIO 0

11) DEBUGGING WITH MLOG
Please read README.mlog

12) valgrind on OS X
You will need to run dsymutil on the plfs binary and libplfs.0.dylib to get 
debug symbols available for valgrind so it can report line numbers.
