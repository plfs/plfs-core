###############################################################################
                Documentation for ACE: Analysis of Coordinated Executions
                        A PLFS Analysis Tool
###############################################################################
***************************************************************************
Parallelized ACE Documentation
***************************************************************************
The following documentation is for the parallelized version that is run 
with mpi. For information about the serial version, please see the bottom
of this documentation

analysis.sh is an example moab script that runs all the necessary commands
to produce a pdf. Interactive mode is not able to be run from within the script
but can be run after the script. This is due to having the display correctly
show.

***************************************************************************
Parallel Analysis Features
***************************************************************************
Example command: aprun -n 16 ./analysis -m <plfs_file> -q <plfs_query>
                 -o <file_system> -p -a -j <job_ID>

This section describes those features that can be applied in parallel to
change the outlooks of the graphs in both the pdf and the interactive mode.
This features should be applied directly to ./analysis from within analysis.sh
in order to be applied during the mpi script.

1) Required flags:
        -m <plfs file>: The PLFS file that you wish to analyze
        -q <query file>: The plfs_query file that goes with the plfs file
           you are analyzing. analysis.sh does creates this for you.
        -o <file system>: This must be a parallel file system in order to get
           the benefits from parallelizing.
        -j <job ID>: This writes the files with a unique number. analysis.sh
           also does this for you.
2) Optional flags:
        -n <number of Bins>: The default number of bins is 500. You can
           adjust this number if you want more/less precision on the
           bandwidths and io graphs.
        -a: This states that you want to graph those processors that end
           above the threshold and that the threshold is the average plus
           the number of standard deviations.
        -b: This states that you want to graph those processors that end
           below the threshold and that the threshold is the average minus
           the number of standard deviations.
        -s <number of standard deviations>: The default is one standard
           deviation. This number should be an positive integer.
        -p: This flag is set if you want to produce the processor graphs.
           These graphs make a lot of lines, so there may be a benefit to
           not graphing these with time and memory. 


***************************************************************************
PDF Features - After Parallelization
***************************************************************************
Example command: python analysis.py -o <file_system> -p -q <plfs_query>
                 -g -j <job_ID>

1) Required flags:
        -o <file system>: This should be the same file system path that
           was given above in the Parallel Analysis Feature. Using the
           analysis.sh script does this for you.
        -q <query file>: The plfs_query file that goes with the plfs file
           you are analyzing. analysis.sh does creates this for you.
        -g: This states that you wish to generate a pdf graph.
        -j <job ID>: This writes the files with a unique number. analysis.sh
           also does this for you.
2) Optional flags:
        -p: This flag is set if you want to produce the processor graphs.
           These graphs make a lot of lines, so there may be a benefit to
           not graphing these with time and memory.
        -m: This flag is set if you want to produce all of your graphs in 
            multiple processes. This will produce multiple pdfs rather than
            a single pdf of multiple pages. 

***************************************************************************
Interactive Features - After Parallelization
***************************************************************************
While this cannot be run from within analysis.sh, after running the parallel
command to generate the data files, you can run this command directly.

Example command: python analysis.py -o <file_system> -p -q <plfs_query>
                 -i -j <job_ID>

1) Required flags:
        -o <file system>: This should be the same file system path that
           was given above in the Parallel Analysis Feature.
        -q <query file>: The plfs_query file that goes with the plfs file
           you are analyzing.
        -i: This states that you wish to run in interactive mode.
        -j <job ID>: This writes the files with a unique number.
2) Optional flags:
        -p: This flag is set if you want to produce the processor graphs.
           These graphs make a lot of lines, so there may be a benefit to
           not graphing these with time and memory.
3) Features within the Application:
        -Save Current Graph: Each graph has a save button on the top toolbar
        that saves the current graph only. Rather than saving all the graphs.
        -Zoom/Pan: Each graph has a zoom/pan button on the top toolbar that
        allows you to zoom in.
        -Annotations: The top graph on the bandwidths and IO and the bottom
        graph on the processor graphs both are able to be clicked and you
        can get more information about that specific point. These annotations
        do not work if you are currently zooming/pan. These annotations stay
        during printing.
        -Clear Current Graph: While on one of these graphs, you can press 'c'
        to clear the graph of all of its annotations.
        -Save all to PDF: This button produces a PDF of all the graphs. If you
        are zoomed, the zoomed version will appear as well as any annotations.
        -Clear All Annotations: This clears all the annotations on all the
        graphs.
        -Undo Last Annotation: The last five annotations are kept so that you
        can undo just the last 5 annotations rather than clearing the whole
        screen.


***************************************************************************
Serial ACE Documentation
***************************************************************************
The serial version works similarly to the above parallelized version, but 
without MPI. In order to run the serial version, you must include -s as a 
flag to analysis.py.

Example command: python analysis.py -o <plfs_map output> -q <plfs_query 
                output> -p -s 
1) Required flags:
        -o <plfs_map output>: This should be the plfs_map file that contains
            the output of plfs_map on the file you are analyzing. 
        -q <query file>: The plfs_query file that goes with the plfs file
            you are analyzing.
        -s: This states that you wish to run in the serial mode. 
2) Optional flags:  
        -p: This flag is set if you want to produce the processor graphs.
            These graphs make a lot of lines, so there may be a benefit to
            not graphing these with time and memory.  
        -n <number of Bins>: The default number of bins is 500. You can
            adjust this number if you want more/less precision on the
            bandwidths and io graphs.
        -a: This states that you want to graph those processors that end
            above the threshold and that the threshold is the average plus
            the number of standard deviations.
        -b: This states that you want to graph those processors that end
            below the threshold and that the threshold is the average minus
            the number of standard deviations.
        --stdev <number of standard deviations>: The default is one standard
            deviation. This number should be an positive integer.
        -c: This flag will create a CSV of the plfs_map output if you wish to
            graph in a different program. 
